
package ( test3 ) with import './lib/khepri-lambda' lambda#{

  id, apply, self_apply
  constant
  pair, first, second
  _true, _false, cond
  not, and, or
  succ, pred, is_zero
  zero, one, two, three, four, five, six, seven, eight, nine
  ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty
  
}

in {
  
  test3 := {};

  // free tries
  test3.not_true_is_false := not _true === _false;
  test3.not_false_is_true := not _false === _true;
  test3.true_is_not_false := _true === not _false;
  test3.true_and_true_is_true := and _true _true === _true;
  test3.false_and_true_is_false := and _false _true === _false;
  test3.false_or_false_is_false := or _false _false === _false;
  test3.true_or_false_is_true := or _true _false === _true;
  
  var count = \n -> ? is_zero n : 0 : 1 + count(pred n);  // fails on pred one!!!
  //test3.trying_count := count(one) === 1 + count(zero);
  
  test3.succ_succ_zero_is_two := succ (succ zero) === two;
  test3.pred_one_is_zero := pred one === zero;
  test3.pred_zero_is_zero := pred zero === zero;
  test3.pred_one_is_not_two := pred one === not two;
  test3.pred_pred_three_is_one := pred (pred three) === one;
  test3.one_is_pred_pred_three := one === pred (pred three);
  test3.is_zero_zero_is_true := is_zero zero === _true;
  test3.is_zero_ten_is_false := is_zero ten === _false;
  
}