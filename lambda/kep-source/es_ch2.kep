
package (
  idd
  self_self
  double
  test2
  triplet
  first_of_3
  second_of_3
  third_of_3
  
) 

with import './lib/khepri-lambda' 
  lambda#{
    id
    id2
    apply
    self_apply
    first
    second
    pair
    
  }

in {
  test2 := {};

  idd := id id;
  double := \x -> 2*x;

  // next one would blow the stack
  //self_self := self_apply self_apply;
  
  // free runs
  test2.apply_id_is_id := apply id === id;
  test2.apply_apply_is_apply := apply apply === apply;

  // es 2.3
  test2._es23a := apply (apply id) === id;
  test2._es23b := (\x -> \y -> pair x y id) double ===  apply double; 
  test2._es23c := self_apply (self_apply second) === id;  

  // es 2.4
  triplet := \x -> \y -> \z -> \w -> w x y z;  
  first_of_3 := \x -> \y -> \z -> x;
  second_of_3 := \x -> \y -> \z -> y;
  third_of_3 := \x -> \y -> \z -> z;

  test2._es24a := triplet 12 13 14 first_of_3 === id 12;
  test2._es24b := triplet 11 12 13 second_of_3 === id 12;
  test2._es24c := triplet 10 11 12 third_of_3 === id 12;
}