// main lambda components
package (
  id, apply, self_apply
  constant
  pair, first, second
  _true, _false, cond
  not, and, or
  first3, second3, third3
  succ, pred, is_zero
  zero, one, two, three, four, five, six, seven, eight, nine
  ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty
  count, equals
  add, add2, mult, recursive
)
{
  // ch 2
  id := \x -> x;
  apply := \x -> \y -> x y;
  self_apply := \s -> s s;
  constant := \c -> \ -> c;
  
  pair := \x -> \y -> \w -> w x y;
  first := \x -> \y -> x;
  second := \x -> \y -> y;
  
  // ch 3
  _true := first;
  _false := second;
  cond := pair;
  not := \x -> x _false _true;
  and := \x -> \y -> x y _false;
  or := \x -> \y -> x _true y;
  
  succ := \n -> pair _false n; // \w -> w _false n;
  //pred := \n -> n second; // NB: pred zero fails!!!
  //pred := \n -> (((is_zero n) zero) (n second)) ;
  pred := \n -> (((cond zero) (n second)) (is_zero n));
  zero := id;
  is_zero := \n -> n first; // REM first === _true

  // CHURCH NUMERALS
  //first3 := \x -> \y -> \z -> x;
  //second3 := \x -> \y -> \z -> y;
  //third3 := \x -> \y -> \z -> z;
  //
  //zero := \f -> \x -> x; // second
  //one  := \f -> \x -> f x;
  //two  := \f -> \x -> f (f x);
  //three:= \f -> \x -> f (f (f x));
  //
  //succ := \n -> \f -> \x -> f ((n f) x);
  //is_zero := \n -> n second === 
  //
  count := \n -> ? (is_zero n === _true) : 0 : 1 + count(pred n);
  equals := \a -> \b -> count(a) === count(b);

  // ch 4
  //add := \x -> \y -> (((is_zero y) x) (add (succ x) (pred y)));
  add2 := \f -> \x -> \y -> (((is_zero y) x) ((((f f) (succ x)) (pred y))));
  add = add2 add2;
  
  mult := \x -> \y -> (((is_zero y) zero) (add x (mult x (pred y))));

//  recursive := \f -> (\s 
  
  // additional stuff  
  one := succ zero;
  two := succ one;
  three := succ two;
  four := succ three;
  five := succ four;
  six := succ five;
  seven := succ six;
  eight := succ seven;
  nine := succ eight;
  ten := succ nine;
  eleven := succ ten;
  twelve := succ eleven;
  thirteen := succ twelve;
  fourteen := succ thirteen;
  fifteen := succ fourteen;
  sixteen := succ fifteen;
  seventeen := succ sixteen;
  eighteen := succ seventeen;
  nineteen := succ eighteen;
  twenty := succ nineteen;
  
}